version: 2.1

jobs:
  lint_code_dockerfile:

    docker:
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            # Install python requirements
            make install-requirements
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths: [./venv]
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint for python code and Dockerfile
          command: |
            . venv/bin/activate
            make lint

  build_scan_push_docker_image:

    docker:
    - image: docker:stable

    # Specify docker tag and version
    environment:
      IMAGE_NAME: mostafaabdelrahman/udacity-capstone
      IMAGE_TAG: v2

    steps:
      - checkout
      # - setup_remote_docker
      # - run:
      #     name: Build image
      #     command: docker build -t "${IMAGE_NAME}:ci" .
      # - run:
      #     name: Scan image
      #     command: |
      #       apk add curl bash
      #       curl -s https://ci-tools.anchore.io/inline_scan-latest | bash -s -- -r "${IMAGE_NAME}:ci"
      - run:
          name: Push to DockerHub
          command: |
            # echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            # docker tag "${IMAGE_NAME}:ci" "${IMAGE_NAME}:${IMAGE_TAG}"
            # docker push "${IMAGE_NAME}:${IMAGE_TAG}"
            # Save Docker image name to MemStash.io
            apk add --no-cache curl
            curl -H "Content-Type: text/plain" \
              -H "token: imagename-${CIRCLE_WORKFLOW_ID}" --request PUT \
              --data "${IMAGE_NAME}:${IMAGE_TAG}" https://api.memstash.io/values/imagename
      # - store_artifacts:
      #     path: anchore-reports/

  rolling_update:

    docker:
      - image: amazon/aws-cli

    steps:
      - checkout
      - run:
          name: Install kubectl and other dependencies
          command: |
            yum -y install sudo tar curl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: Get EKS kubeconfig
          command: |
            aws eks --region us-west-2 update-kubeconfig --name udacity-capstone
      - run:
          name: Rolling update
          command: |
            DOCKER_IMAGE=$(curl -H "token: imagename-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/imagename)
            echo $DOCKER_IMAGE
            # aws eks --region us-west-2 update-kubeconfig --name udacity-capstone
            # kubectl get deploy -l app=capstone-deployment -o wide
            # kubectl set image deploy/capstone-deployment capstone-deployment="$DOCKER_IMAGE" --record
            # kubectl rollout status deploy/capstone-deployment
            # kubectl get deploy -l app=capstone-deployment -o wide

workflows:
  capstone-workflow:
    jobs:
      - lint_code_dockerfile
      - build_scan_push_docker_image:
          requires: [lint_code_dockerfile]
      - rolling_update:
          requires: [build_scan_push_docker_image]
